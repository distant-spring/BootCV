% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CV.confint.R
\name{CV.confint}
\alias{CV.confint}
\title{Cross-Validation estimation and confidence interval}
\usage{
CV.confint(
  boot,
  data,
  L,
  m,
  method = c("Boot.CV", "Boot.Cal"),
  adj = TRUE,
  B.cv = 400,
  alpha = 0.05,
  print = FALSE
)
}
\arguments{
\item{boot}{the return list from Boot.CV or Boot.Cal function.}

\item{data}{data matrix of dimension nobs x nvars; each row is an observation vector.}

\item{L}{summary statistics with two inputs, train.data and test.data,
which are in the same form as data; it evaluates the performance of estimation fitted with train.data in test.data.}

\item{m}{training set size.}

\item{method}{'Boot.CV' or 'Boot.Cal'; use Boot.CV or Boot.Cal algorithms.}

\item{adj}{bool value; whether to adjust for the reduced training sample size (default is TRUE).}

\item{B.cv}{the number of cross-validations (default is 400).}

\item{alpha}{1-confidence level (default is 0.05).}

\item{print}{bool value; whether to print the result (default is FALSE).}
}
\value{
\item{est}{the cross-validation estimation.}
\item{CI}{the bootstrap cross-validation confidence interval.}
}
\description{
CV.confint returns the cross-validation estimation and confidence interval based on
the result of Boot.CV ot Boot.Cal
}
\details{
This function calculates (1) the cross-validation estimation
\deqn{\widehat{Err}^{CV}_m=\frac{1}{B_{CV}}\sum_{b=1}^{B_{CV}} L\left\{D_{test}^b, \hat{\psi}(D_{train}^b)\right\},}{}
where data \eqn{D=D_{train}^b\cup D_{test}^b} represents the b-th split in cross-validation and
summary statistics L evaluates the performance of estimation \eqn{\hat{\psi}} fitted with training set in testing set.
and (2) the corresponding confidence interval
\deqn{\left[\widehat{Err}^{CV}_m-z_{1-\alpha/2}\times \widehat{\sigma}_m^{CV},  \widehat{Err}^{CV}_m+z_{1-\alpha/2}\times \widehat{\sigma}_m^{CV} \right] (\text{for Boot.CV})}{}
\deqn{\left[\widehat{Err}^{CV}_m-c_{1-\alpha/2}\times \widehat{\sigma}_m^{CV},  \widehat{Err}^{CV}_m+c_{1-\alpha/2}\times \widehat{\sigma}_m^{CV} \right] (\text{for Boot.Cal})}{}
where \eqn{\widehat{\sigma}_m^{CV}} is the bootstrap standard error from Boot.CV or Boot.Cal, \eqn{z_{1-\alpha/2}} and \eqn{c_{1-\alpha/2}} are corresponding quantiles.
}
\examples{
# library(lme4) # load required package
library(BootCV)

set.seed(1)
# data generation
n <- 90
p <- 10
x <- matrix(rnorm(n * p), ncol = p)
beta <- rnorm(p)
y <- x \%*\% beta + rnorm(n)
data <- cbind(y, x)

# summary statistics
L <- function(train.data, test.data) {
  y <- train.data[, 1]
  x <- train.data[, -1]
  yt <- test.data[, 1]
  xt <- test.data[, -1]

  fit <- lm(y ~ x)
  beta <- fit$coef

  return(mean((yt - cbind(1, xt) \%*\% beta)^2))
}

m <- 50 # training set size
boot <- Boot.CV(data, L, m)
result1 <- CV.confint(boot, data, L, m, method = "Boot.CV", adj = T, print = T)
result2 <- CV.confint(boot, data, L, m, method = "Boot.CV", adj = F, print = T)

boot <- Boot.Cal(data, L, m)
result1 <- CV.confint(boot, data, L, m, method = "Boot.Cal", adj = T, print = T)
result2 <- CV.confint(boot, data, L, m, method = "Boot.Cal", adj = F, print = T)
}
